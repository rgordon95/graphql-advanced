# import CommentOrderByInput, PostOrderByInput, UserOrderByInput from './__generated__/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    me: User!
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    post(id: ID!): Post!
    posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]!
}

type Mutation {
    createUser(data: CreateUserInput): AuthPayload!
    deleteUser: User!
    loginUser(data: LoginUserInput): AuthPayload!
    updateUser(data: UpdateUserInput ): User!
    createPost(data: CreatePostInput ): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput ): Post!
    createComment(data: CreateCommentInput): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput! ): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPosts: PostSubscriptionPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

enum MutationType {
    CREATED
    DELETED
    UPDATED
}

input CreateUserInput { 
    name: String!
    email: String!
    password: String!
}

input CreatePostInput {
    title: String!
    body: String
    published: Boolean!
}

input CreateCommentInput {
    body: String!
    post: ID!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input UpdateCommentInput {
    body: String
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
    createdAt:  String!
    updatedAt: String!
  }

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
    createdAt:  String!
    updatedAt: String!
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type Comment {
    id: ID!
    body: String!
    author: User!
    post: Post!
    createdAt:  String!
    updatedAt: String!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}